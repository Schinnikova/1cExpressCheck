#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует табличный документ отчет.
//
// Параметры:
//	ПараметрыОтчета - Структура - Параметры отчета
//	АдресХранилища - Строка - Адрес результата во временном хранилище
Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт

	ТаблицаПроверок = СоздатьТаблицуПроверок();
	ЗаполнитьОписанияПроверок(ТаблицаПроверок,ПараметрыОтчета);
	ВыполнитьВсеПроверки(ТаблицаПроверок,ПараметрыОтчета);
	ДокументРезультат = ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок,ПараметрыОтчета);
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат",ДокументРезультат);
	ПоместитьВоВременноеХранилище(РезультатВыполнения,АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьТаблицуПроверок()

	ТаблицаПроверок = Новый ТаблицаЗначений;
	ТаблицаПроверок.Колонки.Добавить("Идентификатор");
	ТаблицаПроверок.Колонки.Добавить("ИдентификаторРаздела");
	ТаблицаПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("Наименование");
	ТаблицаПроверок.Колонки.Добавить("ПредметКонтроля");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаОшибка");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена");
	ТаблицаПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ТаблицаОшибок");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультата");
	ТаблицаПроверок.Колонки.Добавить("РасшифровкаРезультата");
	ТаблицаПроверок.Колонки.Добавить("ВариантыИсправления");

	Возврат ТаблицаПроверок;

КонецФункции

Процедура ЗаполнитьОписанияПроверок(ТаблицаПроверок, ПараметрыОтчета)

	Для Каждого Стр Из ПараметрыОтчета.ВыполняемыеПроверки Цикл
		НоваяСтрока = ТаблицаПроверок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		НоваяСтрока.Идентификатор = Стр;
		Если Стр.ЭтоГруппа Тогда
			ИдентификаторРаздела = Стр;
		Иначе
			Если Стр.Включить Тогда
				НоваяСтрока.ИдентификаторРаздела = ИдентификаторРаздела;
				НоваяСтрока.КомментарийРезультатаНетОшибок = "Нет ошибок";
				НоваяСтрока.КомментарийРезультатаОшибка = "Есть ошибки";
				НоваяСтрока.КомментарийРезультатаНеВыполнена = "Проверка не выполнена";
				НоваяСтрока.РасшифровкаРезультата = НоваяСтрока.Идентификатор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьВсеПроверки(ТаблицаПроверок, ПараметрыОтчета)

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаПроверки Из ТаблицаПроверок Цикл
		ВыполнитьПроверку(СтрокаПроверки,ПараметрыОтчета);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	ТаблицаПроверок.Колонки.Добавить("КолОшибок",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,0)));
	СтрокиГрупп = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа",Истина));
	Для Каждого СтрокаГруппы Из СтрокиГрупп Цикл
		ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(Новый Структура("ИдентификаторРаздела,ПроверкаВыполнена",СтрокаГруппы.Идентификатор,Истина));
		СтрокаГруппы.ПроверкаВыполнена = ВыполненныеПроверки.Количество() > 0;
		ПроверкиСОшибками = ТаблицаПроверок.НайтиСтроки(Новый Структура("ИдентификаторРаздела,ОбнаруженыОшибки",СтрокаГруппы.Идентификатор,Истина));
		СтрокаГруппы.КолОшибок = ПроверкиСОшибками.Количество();
		СтрокаГруппы.ОбнаруженыОшибки = (СтрокаГруппы.ПроверкаВыполнена И ПроверкиСОшибками.Количество() > 0);
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок, ПараметрыОтчета)

	ДокументРезультат = Новый ТабличныйДокумент();
	МакетОтчета = ПолучитьМакет("МакетОтчета");
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Организация = ПараметрыОтчета.Организация;
	ОбластьШапка.Параметры.ПериодПроверки = ПредставлениеПериода(ПараметрыОтчета.НачалоПериода,КонецДня(ПараметрыОтчета.КонецПериода),"ФП = Истина");
	ДокументРезультат.Вывести(ОбластьШапка);
	ВсегоОшибок = ТаблицаПроверок.Итог("КолОшибок");
	Если ВсегоОшибок > 0 Тогда
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокЕстьОшибки");
		ОбластьЗаголовок.Параметры.ВсегоОшибок = ВсегоОшибок;
	Иначе
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа,ПроверкаВыполнена",Ложь,Истина));
	ОбластьЗаголовок.Параметры.ПроведеноПроверок = ВыполненныеПроверки.Количество();
	ВсегоПроверок = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа",Ложь));
	ОбластьЗаголовок.Параметры.ВсегоПроверок = ВсегоПроверок.Количество();
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	ОбластьРазделУчетаНетОшибок = МакетОтчета.ПолучитьОбласть("РазделУчета");
	ОбластьРазделУчетаЕстьОшибки = МакетОтчета.ПолучитьОбласть("РазделУчетаЕстьОшибки");
	ОбластьРазделУчетаНеВыполнен = МакетОтчета.ПолучитьОбласть("РазделУчетаНеВыполнен");
	ОбластьПроверкаНетОшибок = МакетОтчета.ПолучитьОбласть("Проверка");
	ОбластьПроверкаЕстьОшибки = МакетОтчета.ПолучитьОбласть("ПроверкаЕстьОшибки");
	ОбластьПроверкаНеВыполнена = МакетОтчета.ПолучитьОбласть("ПроверкаНеВыполнена");
	ОбластьПроверкаОшибкаИсполнения = МакетОтчета.ПолучитьОбласть("ПроверкаОшибкаИсполнения");
	ОбластьПредметКонтроля = МакетОтчета.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарийРезультатаНетОшибок = МакетОтчета.ПолучитьОбласть("КомментарийРезультата");
	ОбластьКомментарийРезультатаЕстьОшибки = МакетОтчета.ПолучитьОбласть("КомментарийРезультатаЕстьОшибки");
	ОбластьРазделительРазделаУчета = МакетОтчета.ПолучитьОбласть("РазделительРазделаУчета");
	ОбластьШапкаОшибок = МакетОтчета.ПолучитьОбласть("ШапкаОтчетОбОшибках");
	ОбластьПодвалОшибок = МакетОтчета.ПолучитьОбласть("ПодвалОтчетОбОшибках");
	ПервыйРаздел = Истина;
	ПерваяПроверкаРаздела = Истина;
	Для Каждого СтрокаПроверки Из ТаблицаПроверок Цикл
		Если СтрокаПроверки.ЭтоГруппа Тогда
			Если НЕ ПервыйРаздел Тогда
				ДокументРезультат.ЗакончитьГруппуСтрок();
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета,1);
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаНеВыполнен;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаЕстьОшибки;
			Иначе
				ОбластьРазделУчета = ОбластьРазделУчетаНетОшибок;
			КонецЕсли;
			ОбластьРазделУчета.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьРазделУчета,1);
			ПервыйРаздел = Ложь;
			ПерваяПроверкаРаздела = Истина;
		Иначе
			Если ПерваяПроверкаРаздела Тогда
				ДокументРезультат.НачатьГруппуСтрок(,Ложь);
				ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета,2);
			КонецЕсли;
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				Если СтрокаПроверки.ОбнаруженыОшибки Тогда
					ОбластьПроверка = ОбластьПроверкаОшибкаИсполнения;
				Иначе
					ОбластьПроверка = ОбластьПроверкаНеВыполнена;
				КонецЕсли;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьПроверка = ОбластьПроверкаЕстьОшибки;
				Если ТипЗнч(СтрокаПроверки.ТаблицаОшибок) = Тип("ТаблицаЗначений") Тогда
					СтрокаПроверки.КолОшибок = СтрокаПроверки.ТаблицаОшибок.Количество();
					СтрокаПроверки.ВариантыИсправления = ?(ЗначениеЗаполнено(СтрокаПроверки.Идентификатор.ТекстАлгоритма),
																		НСтр("ru = 'авто'"),
																		НСтр("ru = 'ручной'"));
				Иначе
					СтрокаПроверки.КолОшибок = 1;
				КонецЕсли;
			Иначе
				ОбластьПроверка = ОбластьПроверкаНетОшибок;
			КонецЕсли;
			ОбластьПроверка.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПроверка,2);
			ПерваяПроверкаРаздела = Ложь;
			ДокументРезультат.НачатьГруппуСтрок(,Ложь);
			ОбластьПредметКонтроля.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПредметКонтроля,3);
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаЕстьОшибки;
			Иначе
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаНетОшибок;
			КонецЕсли;
			ОбластьКомментарийРезультата.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьКомментарийРезультата,3);
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				Если (ТипЗнч(СтрокаПроверки.ТаблицаОшибок) = Тип("ТаблицаЗначений") И СтрокаПроверки.ТаблицаОшибок.Количество() > 0) Тогда
					ТаблДок = ТабличныйДокументПоТаблицеЗначений(СтрокаПроверки.ТаблицаОшибок);
					ТаблДок.Область(1, 1 ,ТаблДок.ВысотаТаблицы, ТаблДок.ШиринаТаблицы).СоздатьФорматСтрок();
					ДокументРезультат.НачатьГруппуСтрок(,Ложь);
					ДокументРезультат.Вывести(ОбластьШапкаОшибок,4);
					ДокументРезультат.Вывести(ТаблДок);
					ДокументРезультат.Вывести(ОбластьПодвалОшибок,4);
					ДокументРезультат.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЕсли;
			ДокументРезультат.ЗакончитьГруппуСтрок();
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПерваяПроверкаРаздела Тогда
		ДокументРезультат.ЗакончитьГруппуСтрок();
	КонецЕсли;
	Возврат ДокументРезультат;
КонецФункции

Функция ТабличныйДокументПоТаблицеЗначений(ТаблицаЗначений)

	ТаблДок = Новый ТабличныйДокумент;
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	НомерСтроки = 1;
	НомерКолонки = 0;

	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		НомерКолонки = ТаблицаЗначений.Колонки.Индекс(Колонка);
		Область = ТаблДок.Область(НомерСтроки, НомерКолонки + 1);
		Область.Текст = Колонка.Заголовок;
		Область.ЦветФона = WebЦвета.МятныйКрем;
		Область.Обвести(Линия, Линия, Линия, Линия);
	КонецЦикла;

	Для Каждого Строка Из ТаблицаЗначений Цикл
		НомерСтроки = НомерСтроки + 1;
		НомерКолонки = 0;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			НомерКолонки = ТаблицаЗначений.Колонки.Индекс(Колонка);
			Область = ТаблДок.Область(НомерСтроки, НомерКолонки + 1);
			Область.Текст = Строка[НомерКолонки];
			Область.Расшифровка = Строка[НомерКолонки];
			Область.Обвести(Линия, Линия, Линия, Линия);
		КонецЦикла;
	КонецЦикла;

	РасчетШириныКолонок(ТаблДок);
	Возврат ТаблДок;

КонецФункции

Процедура РасчетШириныКолонок(ТабличныйДокумент)

	Перем МаксимальноеКоличествоСтрок, МаксимальнаяШиринаКолонки;
	Перем КонечнаяСтрока, НачальнаяСтрока, ТекущаяКолонка, ТекущаяСтрока, НачалоДанных;
	Перем ОбластьШапки, ОбластьПодвала;
	Перем ШиринаКолонки, ТекстЯчейки, НомерСтрокиТекста;
	Перем КоличествоУровнейГруппировокСтрок;
	Перем ШириныКолонок;

	// Максимальное количество строк отчета, которые будут использованы для расчета ширин колонок
	МаксимальноеКоличествоСтрок = 50;
	// Ограничение максимальной ширины колонки
	МаксимальнаяШиринаКолонки = 50;
	// Массив, в который будут помещаться ширины колонок
	ШириныКолонок = Новый Массив;
	// Получим количество уровней группировок в отчете для учета автоматического отступа
	КоличествоУровнейГруппировокСтрок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();

	// Инициализируем начальные строки
	НачальнаяСтрока = 0;
	НачалоДанных = 0;

	// Найдем в результирующем документе область шапки таблицы
	ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаТаблицы");
	Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
		НачальнаяСтрока = ОбластьШапки.Верх;
		НачалоДанных = ОбластьШапки.Низ + 1;
	Иначе
		// Если область шапки таблицы не найдена, найдем область шапки строк
		ОбластьШапки = ТабличныйДокумент.Области.Найти("ШапкаСтрок");
		Если ТипЗнч(ОбластьШапки) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			// Из шапки таблицы получим начальную строку с которой будем рассчитывать ширины
			НачальнаяСтрока = ОбластьШапки.Верх;
			НачалоДанных = ОбластьШапки.Низ + 1;
		КонецЕсли;
	КонецЕсли;

	// Получим область подвала отчета и вычислим конечную строку расчета
	ОбластьПодвала = ТабличныйДокумент.Области.Найти("Подвал");
	Если ТипЗнч(ОбластьПодвала) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		// Область подвала найдена
		КонечнаяСтрока = ОбластьПодвала.Верх - 1;
		Если КонечнаяСтрока - НачальнаяСтрока > МаксимальноеКоличествоСтрок Тогда
			КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
		КонецЕсли;
	Иначе
		// Область подвала не найдена
		КонечнаяСтрока = НачальнаяСтрока + МаксимальноеКоличествоСтрок;
	КонецЕсли;

	// Ограничим конечную строку
	КонечнаяСтрока = Мин(КонечнаяСтрока, ТабличныйДокумент.ВысотаТаблицы);
	// Переберем все колонки отчета
	Для ТекущаяКолонка = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		АвтоОтступ = 0;
		// Переберем строки, которые будут использованы для расчета ширин колонок
		Для ТекущаяСтрока = НачальнаяСтрока По КонечнаяСтрока Цикл
			ШиринаКолонки = 0;
			// Получим область текущей ячейки
			ОбластьЯчейки = ТабличныйДокумент.Область(ТекущаяСтрока, ТекущаяКолонка);
			Если ОбластьЯчейки.Лево <> ТекущаяКолонка Или ОбластьЯчейки.Верх <> ТекущаяСтрока Тогда
				// Данная ячейка принадлежит объединенным ячейкам и не является начальной ячейкой
				Продолжить;
			КонецЕсли;
			Если КоличествоУровнейГруппировокСтрок > 0 И ТекущаяСтрока = НачалоДанных Тогда
				// Для первой строки с данными получим значение автоотступа
				АвтоОтступ = ОбластьЯчейки.АвтоОтступ;
			КонецЕсли;
			// Получим текст ячейки
			ТекстЯчейки = ОбластьЯчейки.Текст;
			// Для каждой строки из текста ячейки рассчитаем количество символов в строке
			Для НомерСтрокиТекста = 1 По СтрЧислоСтрок(ТекстЯчейки) Цикл
				ШиринаТекстаЯчейки = СтрДлина(СтрПолучитьСтроку(ТекстЯчейки, НомерСтрокиТекста));
				// Если используется автоотступ, то прибавим к ширине ячейки его величину
				Если АвтоОтступ <> Неопределено И АвтоОтступ > 0 Тогда
					ШиринаТекстаЯчейки = ШиринаТекстаЯчейки + КоличествоУровнейГруппировокСтрок * АвтоОтступ;
				КонецЕсли;
				ШиринаКолонки = Макс(ШиринаКолонки, ШиринаТекстаЯчейки);
			КонецЦикла;
			Если ШиринаКолонки > МаксимальнаяШиринаКолонки Тогда
				// Ограничим ширину колонки
				ШиринаКолонки = МаксимальнаяШиринаКолонки;
			КонецЕсли;
			Если ШиринаКолонки <> 0 Тогда
				// Ширина колонки рассчитана
				// Определим, сколько ячеек по ширине используется в области для текущей ячейки
				КоличествоКолонок = ОбластьЯчейки.Право - ОбластьЯчейки.Лево;
				// Переберем все ячейки, расположенные в области
				Для НомерКолонки = 0 По КоличествоКолонок Цикл
					Если ШириныКолонок.ВГраница() > ТекущаяКолонка - 1 + НомерКолонки Тогда
						// В массиве ширин колонок уже был элемент для текущей колонки
						Если ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = Неопределено Тогда
							// Значение ширины колонки еще не было установлено
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] = ШиринаКолонки / (КоличествоКолонок + 1);
						Иначе
							// Значение ширины колонки уже было установлено
							// Вычислим максимум ширины колонки
							ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки] =
								Макс(ШириныКолонок[ТекущаяКолонка - 1 + НомерКолонки], ШиринаКолонки / (КоличествоКолонок + 1));
						КонецЕсли;
					Иначе
						// В массиве ширин колонок еще не было элемента для данной колонки
						// Добавим элемент в массив ширин колонок
						ШириныКолонок.Вставить(ТекущаяКолонка - 1 + НомерКолонки, ШиринаКолонки / (КоличествоКолонок + 1));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	// Конец цикла перебора строк
	КонецЦикла;	// Конец цикла перебора колонок
	// Переберем все элементы в массиве вычисленных ширин колонок
	Для ТекущаяКолонка = 0 По ШириныКолонок.ВГраница() Цикл
		Если ШириныКолонок[ТекущаяКолонка] <> Неопределено Тогда
			// Ширина колонок установлена
			// Установим ширину области ячеек
			ТабличныйДокумент.Область(, ТекущаяКолонка + 1, НачалоДанных, ТекущаяКолонка + 1).ШиринаКолонки = ШириныКолонок[ТекущаяКолонка] + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета)

	Если СтрокаПроверки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Результат = Неопределено;
	Попытка
		Результат = РезультатПроверки(СтрокаПроверки.Идентификатор, ПараметрыОтчета);
		Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
			СтрокаПроверки.ПроверкаВыполнена = Истина;
			СтрокаПроверки.ОбнаруженыОшибки = Результат.Количество() > 0;
			СтрокаПроверки.ТаблицаОшибок = Результат;
		ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
			СтрокаПроверки.ПроверкаВыполнена = Истина;
			СтрокаПроверки.ОбнаруженыОшибки = Результат;
			СтрокаПроверки.ТаблицаОшибок = Неопределено;
		Иначе
			СтрокаПроверки.ПроверкаВыполнена = Ложь;
			СтрокаПроверки.ОбнаруженыОшибки = Ложь;
			СтрокаПроверки.ТаблицаОшибок = Неопределено;
		КонецЕсли;
	Исключение
		СтрокаПроверки.ПроверкаВыполнена = Ложь;
		СтрокаПроверки.ОбнаруженыОшибки = Истина;
		СтрокаПроверки.ТаблицаОшибок = Неопределено;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		СтрокаПроверки.КомментарийРезультата = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СтрокаПроверки.РасшифровкаРезультата = "";
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки.КомментарийРезультата) Тогда
		Если СтрокаПроверки.ПроверкаВыполнена Тогда
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаОшибка;
			Иначе
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНетОшибок;
			КонецЕсли;
		Иначе
			СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицу ошибок по проверке.
//
// Параметры:
//	Идентификатор - СправочникСсылка.ОписанияПроверок
//	ПараметрыОтчета - Структура - Параметры отчета
//
// Возвращаемое значение:
//	Неопределено, ТаблицаЗначений, ДеревоЗначений - Результат проверки
Функция РезультатПроверки(Идентификатор, ПараметрыОтчета) Экспорт
	
	СхемаИНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Идентификатор, "ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");

	СКД = СхемаИНастройки.ХранилищеСхемыКомпоновкиДанных.Получить();

	Если СКД <> Неопределено Тогда
		Настройки = СхемаИНастройки.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если Настройки = Неопределено Тогда
			КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
			КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
			Настройки = КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	УстановитьПараметрыВНастройкахОтчета(ПараметрыОтчета, Настройки);

	УстановитьОтборыВНастройкахОтчета(ПараметрыОтчета, Настройки);

	// выполнить отчет в коллекцию значений
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = Компоновщик.Выполнить(СКД, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет,,ДанныеРасшифровки,Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);

	ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	Возврат ТаблицаРезультата;

КонецФункции

Процедура УстановитьОтборыВНастройкахОтчета(ПараметрыОтчета, Настройки) Экспорт

	// установим отборы
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация)
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(Настройки, Новый ПолеКомпоновкиДанных("Организация")) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки.Отбор, "Организация", ПараметрыОтчета.Организация);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыОтчета.Склад)
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(Настройки, Новый ПолеКомпоновкиДанных("Склад")) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки.Отбор, "Склад", ПараметрыОтчета.Склад);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыОтчета.Партнер)
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(Настройки, Новый ПолеКомпоновкиДанных("Партнер")) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки.Отбор, "Партнер", ПараметрыОтчета.Партнер);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыОтчета.Контрагент)
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(Настройки, Новый ПолеКомпоновкиДанных("Контрагент")) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки.Отбор, "Контрагент", ПараметрыОтчета.Контрагент);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыОтчета.Номенклатура)
		И КомпоновкаДанныхКлиентСервер.ПолеИспользуется(Настройки, Новый ПолеКомпоновкиДанных("Номенклатура")) Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки.Отбор, "Номенклатура", ПараметрыОтчета.Номенклатура);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПараметрыВНастройкахОтчета(ПараметрыОтчета, Настройки) Экспорт

	// установим параметры
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода", ПараметрыОтчета.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода", ПараметрыОтчета.КонецПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Организация", ПараметрыОтчета.Организация);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Склад", ПараметрыОтчета.Склад);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Партнер", ПараметрыОтчета.Партнер);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Контрагент", ПараметрыОтчета.Контрагент);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Номенклатура", ПараметрыОтчета.Номенклатура);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
